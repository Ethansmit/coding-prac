Name: Insert Delete GetRandom O(1)
Type: Algorithm
Difficulty: Medium
From: LeetCode

Description:
    Implement the RandmizeSet class:
        - 'RandomizedSet()' inserts an item 'val' into the set if not present. Returns 'true' if
        the item was not present, 'false' otherwise.
        - 'bool insert(int val)' inserts an item 'val' into the set if not present. Returns 'true'
        if the item was nto present, 'false' otherwise.
        - 'bool remove(int val)' removes an item 'val' from the set if present. Returns 'true' if
        the item was present, 'false' otherwise.
        - 'int getRandom()' returns a random element from the current set of elements (it's 
        guranteed that at least one element exists when this method is called). Each element must
        have the same probability of being returned.
    
    You must implement the functions of the class such taht each function works in average O(1) time
    complexity.

Assumptions:
    - 2^-31 <= val <= 2^31 - 1
    - At most 2 * 10^5 calls will be made to 'insert', 'remove' and 'getRandom'.
    - There will be at least one element in the data structure when 'getRandom' is called.

Example:
    Input: 
        ["RandomizedSet", "insert", "remove", "insert", "getRandom", "remove", "insert", "getRandom"]
        [[], [1], [2], [2], [], [1], [2], []]
    Output: 
        [null, true, false, true, 2, true, false, 2]
    Explanation: 
        RandomizedSet randomizedSet = new RandomizedSet();
        randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.
        randomizedSet.remove(2); // Returns false as 2 does not exist in the set.
        randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].
        randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.
        randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].
        randomizedSet.insert(2); // 2 was already in the set, so return false.
        randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will 
        always return 2.


Solution Explanation:
    Dictionary, O(n):
        We can implement the class using a dictionary. See the Code solution for a solution.

        Explanation of Correctness:
            We can utilize a dictionary to perform insertion and deletion operations. Then for
            getRandom() we simply utilize a random value generator to obtain the value. Because
            our random function will treat each value from the size of nums to the end as a
            uniform distribution, getRandom() will correctly obtain values at random.

        Explanation of Runtime:
            Because dictionaries/Hash tables perform get operations in constant time, we can
            gurantee an average case runtime of O(1).

            Space complexity is O(n) for each number of values added to the class.