Name: Remove Duplicates from Sorted Array 2
Type: Algorithm
Difficulty: Medium
From: LeetCode

Description:
    Given an integer array nums sorted in asscending order, remove duplicates when a number appears more than twice in the array.

Assumptions:
    - nums.length >= 1
    - nums is sorted in asscending order.

Example:
    Input: nums = [0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1]
    Output: 4

    Input: nums = [0,0,1,1,1,1,2,3,3]
    Output: 7


Solution Explanation:
    Two-pointers, O(N):
        Because the array is sorted, we can assume that given a pointer from the first element to the third element, if the element's values
        are equal, then we can set the first pointer to the second pointer if the elements are different, implying that the elements need
        to be shifted, and then itterate the first pointer. Below describes the specific actions of the algorithm.

        Algorithm Pseudocode:
            1. Check if the length of nums is <= 2. If so, return the length.
            2. establish ptr1, set it equal to 2.
            3. Create a loop using ptr2 = 2, ptr2 <= nums.length, and itterate through the nums doing the following.
                - if nums[ptr2] != nums[ptr1 - 2], then nums[ptr1] = nums[ptr2] and itterate ptr1.

        Proof of Correctness:
            We clearly see that using the following ptr method, we always check two values before to ensure that ptr2 and ptr1 - 2 won't result
            in duplicates over 2. If they are equal, then the algorithm will simply continue, resulting in duplicates over two being replaced by
            future values that aren't the same value. Hence, the algorithm is correct.

        Proof of Runtime:
            Because we loop through the whole array, looking at each element once, the algorithm runs in O(N) time.