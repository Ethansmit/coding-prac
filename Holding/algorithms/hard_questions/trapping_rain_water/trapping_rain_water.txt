Name: Trapping Rain Water
Type: Algorithm
Difficulty: Hard
From: LeetCode

Description:
    Given the non-negative integer array "height," representing an elevation map where the width of each bar is 1, compute how much water
    it can trap after raining.

Assumptions:
    - height.length >= 1
    - height[i] >= 0

Example:
    Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
    Output: 6

    Input: height = [4,2,0,3,2,5]
    Output: 9


Solution Explanation:
    Two-pointers, O(N):
        An intuitive approach is to observe the heights beteween sweeping left and right, and observing the when the left and right sides have a
        space of heights that are the same, implying a local minimum. In this case, the use of a prefixsum and sufixsum can generate two arrays 
        which can then be used to calculate the water held using the explained idea. We can attempt to remove the use of auxiliary data structures
        by utilizing a two pointer method to maintain these height variables, then add the difference beteween the current height and the lowest
        maximum height between the left and right at a given time to obtain the amount of water held.

        Algorithm Pseudocode:
            1. Initialize left and right pointers, left = 0, right = height.leghth - 1
            2. Initialize left_max and right_max, left_max = height[left], right_max = height[right]
            3. Initialize sum_height = 0 to store our total water collection.
            4. While left < right, do the following:
                - If left_max <= right_max
                    - add left_max - height[left] to sum_height, add one to left, and choose the max between left_max and height[left] to be left_max.
                - If right_max > left_max
                    - add right_max - height[right] to sum_height, add one to right, choose the max between right_max and height[right] to be right_max.

        Proof of Correctness:
            We note that given any given height[i], we assume that it is trapped by a max height that is either left or right. height[i] will either be equal
            to or less than the minimum of the maximum heights between the left and right, and we iterate through the left and right, using smaller height 
            between the two as our precedent for determining how much water is filled. Because the left and right max will always be the largest seen value
            given for any height[i], we note that height[i] must either be equal in height to left or right, or it must be below the height, in such case its
            height is added to the returned sum. This ensures that we bound the left and right by a potential max height that is given for a height[i], and
            as a result, each height will be either limited by the left and right heights, or simply add nothing to our total.

        Proof of Runtime:
            Because we iterate i and j through the elements of height once, the runtime is O(N). Space complexity is O(1).