Name: Height Checker
Type: Algorithm
Difficulty: Easy
From: LeetCode

Description:
    A school is trying to take an annual photo of all the students. The students are aksed to stand in a single file
    line in ascending order by height. Let this ordering be represented by the integer array 'expected' where
    'expected[i]' is the expected height of the 'ith' student in line.

    You are given an integer array 'heights' representing the current order that the students are standing in. Each
    heights[i] is the height of the 'ith' student in line (0-indexed).

    Return the number of indices where 'heights[i] != expected[i]'.

Assumptions:
    - heights.length >= 1.
    - 1 <= heights[i] <= 100.

Example:
    Input: heights = [1, 1, 4, 2, 1, 3]
    Output: 3
    Explanation: expected should be [1, 1, 1, 2, 3, 4], hence 3 differences exist.

    Input: heights = [1, 2, 3, 4, 5]
    Output: 0
    Explanation: expected is the same as heights, hence there are 0 differences. 


Solution Explanation:
    Frequency array, O(n):
        Because we want to avoid utilizing a sort algorithm for O(nlogn) runtime, an alternative solution is to 
        obtain the frequency of the heights and use this ordering to rebuild expected. Then we can just find
        the differences between expected and height. This is doable because the heights are bounded by 100. Otherwise,
        we would utilize a hashmap of some sort to reconstruct expected.

        Algorithm Pseudocode:
            Solution {
                // Obtain max to bound frequency array.
                max = max(heights)

                // Build frequency array.
                freq[max - 1]
                for (height in heights) {freq[height]++}

                // Build expected array.
                expected[heights.length]
                for (i = 1; i < max; ++i) {
                    while (freq[i] > 0) {
                        expected[i] = i;
                        freq[i]--
                    }
                }

                // Ccompare expected and heights.
                count = 0
                for (i = 0; i < heights.length; ++i) {
                    if (heights[i] != expected[i]) {
                        count++
                    }
                }
                
                return count
            }

        Explanation of Correctness:
            Because each element of our input is bounded by 100, we can create a array of size max height of 'heights'
            to store the frequencies and rebuild expected. Because expected is the sorted result of 'heights',
            we can just iterate through our frequency array and move up the array, placing the frequencies
            correctly into their right positions of expected. This allows us to compare expected with heights as
            explained by the description.

        Explanation of Runtime:
            The runtime of this algorithm is O(3n), as we find the max element, O(n), then we rebuild 'expected', O(n),
            and finally compare 'expected' with 'heights' to count the misplacements, O(n). We can drop the constants
            to obtain that our runtime is O(n).

            The time complexity is O(n), as we rebuild heights and the frequency table. We note that the frequency
            table is always dependent on the size of the bound of 'heights[i]', which is 100, so the construction
            of 'expected' is dependent on the input.