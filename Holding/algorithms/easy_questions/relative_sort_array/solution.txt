Name: Relative Sort Array
Type: Algorithm
Difficulty: Easy
From: LeetCode

Description:
    Given two arrays 'arr1' and 'arr2', the elements of 'arr2' are distinct, and all elements in 'arr2' are also in
    'arr1'.

    Sort the elements of 'arr1' such that the relative ordering of items in 'arr1' are the same as in 'arr2'. 
    Elements that do not appear in 'arr2' should be placed at the end of 'arr1' in ascending order.

Assumptions:
    - arr1.length >= 1.
    - arr2.length >= 1.
    - arr1[i] >= 0.
    - arr2[i] >= 0.
    - All elements in arr2 are distinct.
    - Each arr2[i] is in 'arr1'.

Example:
    Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]
    Output: [2,2,2,1,4,3,3,9,6,7,19]

    Input: arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]
    Output: [22,28,8,6,17,44]


Solution Explanation:
    Counting Sort, O(n):
        We can solve this problem by counting the total number of elements in arr1 by using a dictionary. We then
        loop through 'arr2', place the elements in order using the dictionary to determine the count. Then we loop
        through the range of arr1 and place the values in place.

        Algorithm Pseudocode:
            Solution {
                // Store the count of arr1 values in dictionary.
                dictCounter
                for (i in arr1) {dictCounter[i]++}

                result
                // Put elements of arr2 in arr1 to result.
                for (i in arr2) {
                    for _ in range(dicCounter.pop(i)) {result.append(dicCounter[i])}
                }
                // Place rest of elements left in arr1 into result by sorted order.
                for (i in range(min(arr1), max(arr1) + 1)) {
                    for _ in range(dictCounter.pop(i, 0)) { result.append(i) }
                }

                return result
            }

        Explanation of Correctness:
            We note that counting the total elements in 'arr1' and storing them in a dictionary, we can easily access 
            the elements by looping through 'arr2', and placing the elements into the return in the order of 'arr2'. 
            Then looping through the range of arr1 will allow us to place the elements in the dictionary left into
            the result in ascending order.

        Explanation of Runtime:
            The runtime is O(3n) as we loop through 'arr1' to add to the dictionary, then loop through 'arr2', placing
            the elements of 'arr1' into the result, then doing the rest of elements 'arr1' into the result. Each of them
            have a worst case of O(n). Thus the runtime is O(n).

            The time complexity is O(n) for the dictionary that stores 'arr1' elements.