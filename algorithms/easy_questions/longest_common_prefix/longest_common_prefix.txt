Name: Longest Common Prefix
Type: Algorithm
Difficulty: Easy
From: LeetCode

Description:
    Write a function to find the longest common prefix string amongst an array of strings.

    If there is no common prefix, return an empty string "".

Assumptions:
    - strs.length >= 1
    - strs[i].length >= 0
    - strs[i] only consists of English characters.

Example:
    Input: strs = ["flower","flow","flight"]
    Output: "fl"
    Expanation: "fl" is the longest prfix for the three words.

    Input: strs = ["dog", "racecar", "car"]
    Output: ""
    Explanation: There exists no common prefix amongst the three words. 


Solution Explanation:
    Loop, O(N):
        A solution to this problem involves making an algorithm and either taking the first word and building the longest
        prefix possible until you reach the length of the shortest word in the strings. Another approach is the opposite,
        start with the shortest word and remove letters until you have a prefix that works for all the strings or until
        the prefix is empty. I will go with the latter approach because it logically makes sense to start with the shortest
        word and just remove letters until we got our answer.

        Algorithm Pseudocode:
            Solution {
                // find shorest string in the array.
                shortest_str = find_shortest_string(strs)
                
                // prefix to return. Initialize it to the shortest string and we will remove characters until we an the answer.
                prefix = shortest_str

                for (i = 0; i < strs.length; i++) {
                    // Remove characters from prefix until word and prefix share the same characters.
                    word = strs[i]
                    while not word.startswith(prefix) {
                        prefix = prefix[:-1] // remove a character from prefix
                        if not prefix {
                            return "" // If prefix is empty, return ""
                        }
                    }
                }
                return prefix
            }

        Explanation of Correctness:
            With the given algorithm we see that for each word, we adjust prefix until we have the longest shared prefix with the 
            shortest word and the current word in the loop. Doing this for every word will either result in the creation of the
            longest prefix, which is returned at the end, or the removal of all characters in prefix, which returns an empty string
            as specificed by the condition in the description. Hence, the function will correctly generate the longest common prefix.

        Explanation of Runtime:
            We loop through each string in strs once to obtain the shortest word and again to adjust our prefix word so our total
            runtime will be O(N + N) which is abstracted to O(N).

            The space time complexity stores two strings, or one if implemented slightly differently, which means that one word will
            be chosen at all times. Hence the space compleixty is O(1).