Name: Get Equal Substrings Within Budget
Type: Algorithm
Difficulty: Medium
From: LeetCode

Description:
    Given two strings, "s" and "t", of the same length and an integer "MaxCost", change s to t. Return the maximum length
    of substring s that can be changed to the same substring of t with a cost less than or equal to MaxCost. If there is no
    possible change that can occur, then return 0.
    
    Changing the ith character of s to the ith character of t costs |s[i] - t[i]|, which is the absolute difference between
    the ASCII values of the characters.

Assumptions:
    - s.length >= 1
    - t.length >= 1
    - Maxcost >= 0
    - s and t can only consist of English lowercase letters.

Example:
    Input: s = "abcd", t = "bcdf", maxCost = 3
    Output: 3

    Input: s = "abcd", t = "acde", maxCost = 0
    Output: 1


Solution Explanation:
    Sliding Window, O(N):
        A sliding window algorithm can give us a an answer by adjusting the size of the substring ensuring that it follows
        the max cost constraint. We can slide our solution along the whole string, and ensure that given a substring, we can
        both achieve the largest possible substring while maintaining cost constraints by checking through our sliding window
        if we go over the cost constraint or not. Everytime we go over the constraint, we slide the whole window forward,
        and check if the new substring size in teh window is greater than all previous substrings seen.

        Algorithm Pseudocode:
            1. Initialize variables
                - ptr1, the left side of the window.
                - cost, to track total transformation cost.
                - sub_len, to track the largest substring found.
            2. Create for loop, using ptr2, our right side of the window, as our itterated variable, then do the following:
                - For each character at ptr2, compute the ASCII transformation cost and add it to our cost variable.
            3. If the cost > maxCost, then do the following:
                - Subtract the cost of the ptr1's character ASCII transformation cost from our cost variable.
                - Add one to ptr1.
            4. recaculate sub_len as the max between the current sub_len and the size of the window (ptr2 - ptr1 + 1)

        Proof of Correctness:
            We note that we can divide "s" into a number of substrings by the maxCost variable. Doing this, we can generate a 
            series of substrings of s which all abide to the maxCost. These potential substrings are generated by the sliding
            window, in which each window does the following when it hits the maxCost constraint for a generated substring.
                - A previous substring, stored in sub_len, is already found, in which case we keep this longer substring.
                - The current window's substring is larger, if so, sub_len is replaced by the current window.
            
            We note that in the cases above, that we can obtain the largest generated substring through the given
            length calculation, and essentially, the string "s" can be broken into segments of costs, which our sliding window
            will accuartely find, and because we will always choose the largest substring, we are guaranteed to find the correct asnwer.

        Proof of Runtime:
            Because we visit each character once through the sliding window, we note that the runtime if O(N).