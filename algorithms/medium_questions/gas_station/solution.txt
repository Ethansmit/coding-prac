Name: Gas Station
Type: Algorithm
Difficulty: Medium
From: LeetCode

Description:
    There are 'n' gas stations along a circular route, where the amount of gas at the 'ith' 
    station is 'gas[i]'.

    You have a car with an unlimited gas tank and it costs 'cost[i]' of gas to travel from the 
    'ith' station to its next '(i + 1)th' station. You begin the journey with an empty tank at 
    one of the gas stations.

    Given two integer arrays 'gas' and 'cost', return the starting gas station's index if you 
    can travel around the circuit once in the clockwise direction, otherwise return -1.
    If there exists a solution, it is guranteed to be unique.

Assumptions:
    - n == gas.length == cost.length.
    - n >= 1.
    - gas[i], cost[i] >= 0

Example:
    Input: gas = [1, 2, 3, 4, 5] cost = [3, 4, 5, 1, 2]
    Output: 3
    Explanation: 
        Start at astation 3 (index 3) and fill up with 4 units of gas. Your tank = 0 + 4 = 4.
        Travel to station 4. Your tank = 4 - 1 + 5 = 8
        Travel to station 0. Your tank = 8 - 2 + 1 = 7
        Travel to station 1. Your tank = 7 - 3 + 2 = 6
        Travel to station 2. Your tank = 6 - 4 + 3 = 5
        Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
        Therefore, return 3 as the starting index.

    Input: gas = [2, 3, 4] cost = [3, 4, 3]
    Output: -1
    Explanation:
         You can't start at station 0 or 1, as there is not enough gas to travel to the next station.
        Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
        Travel to station 0. Your tank = 4 - 3 + 2 = 3
        Travel to station 1. Your tank = 3 - 3 + 3 = 3
        You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.
        Therefore, you can't travel around the circuit once no matter where you start.


Solution Explanation:
    Brute-Force, O(n^2):
        The brute-force solution involves starting at each index, and going through the stations
        until we either run out of gas or complete a loop around, which then we return the
        starting index.

        Algorithm Pseudocode:
            Solution {
                n = gas.length
                for (i = 0; i < n; i++) {
                    total_fuel = 0
                    stop_count = 0
                    j = i
                    // Check if a cycle is possible.
                    while (stop_count < n) {
                        total_fuel += gas[j % n] - cost[j % n]
                        if (total_fuel < 0)
                            break
                        stop_count++
                        j++
                    }
                    // Checks for cycle, if so return start pos.
                    if (stop_count == n && total_fuel >= 0)
                        return i
                }
                return -1
            }

        Explanation of Correctness:
            This solution will loop through every possible route until it hits a route that 
            performs a cycle, in which the algorithm will stop. Because we are guranteed
            unique routes, the solution above will return a correct result if a cycle
            exists. If no cycle exists, then the total_fuel will be less than 0, which means
            that the route will not create a full cycle. This means that if all routes don't
            complete, the loop will terminate and return -1, which is a correct result.

        Explanation of Runtime:
            The use of two loops through the arrays results in a total runtime of O(n^2).

            Time complexity is O(1).
    
    Greedy, O(n):
        We know from the naive approach that if we follow a route that results in our gas
        running out, then we know that the route from the starting point to the 'ith'
        position results in the car running out of gas. Instead of completely restarting
        by moving to start point + 1, we can just simple start at 'i + 1' instead, as
        we know that the routes before won't work. Doing this allows us to check if the
        next positions work. Hence, our main focus will be looking at our total gas to
        check if the route is possible. Then, we will choose the starting location that
        will result in a surplus. We can then analyze our total_surplus to make sure
        that the route is possible, and if so, using our 'start' position gurantees a
        route that will perform a cycle.

        Algorithm Pseudocode:
            Solution {
                n = gas.length
                fuel_diff = 0
                curr_fuel = 0
                start_pos = 0

                for (i = 0; i < n; i++) {
                    fuel_diff += gas[i] - cost[i]
                    curr_fuel += gas[i] - cost[i]
                    // If the fuel runs out, start pos
                    // is suboptimal, change to next index.
                    if (curr_fuel < 0) {
                        surplus = 0
                        start = i + 1
                    }
                }   

                if (total_fuel < 0) {
                    return -1
                } else {
                    return start
                }
            }

        Explanation of Correctness:
            This methodology follows the brute force but with a few differences. The use of 
            fuel_diff (fuel difference) checks the overall difference between the 'costs' and 'gas'
            values. If the difference is < 0, then this implies that the sum of 'costs' is higher
            than the sum of 'gas', which implies that it is impossible to complete a full cycle
            from any starting position.

            Otherwise, if total_fuel >= 0, then the goal is to find the optimal starting position.
            The algorithm gurantees that it will find such position by changing the start each time
            the curr_fuel runs out from a starting position. This implies that the route from
            starting position to 'i' is a negative difference in fuel:cost. This means that no
            matter what position you start from in this range, you will always result in a negative
            difference. Hence, we can just change out starting position to the next value and 
            keep going.
            
            Because we assume the total_fuel >= 0, then even optimal starting positions at the end
            of the array will be valid solutions without checking the front. This is because if
            the beginning of the cost and gas arrays have negative differences, then this implies
            that the end of the array will have a positive difference to follow the logic of 
            total_fuel.

        Explanation of Runtime:
            We loop through 'gas' and 'cost' once, hence our runtime is O(n).

            Our time compleixty is O(1), as we only use a finite set of variables to construct the
            algorithm.