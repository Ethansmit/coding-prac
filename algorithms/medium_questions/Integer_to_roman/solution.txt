Name: Integer to Roman
Type: Algorithm
Difficulty: Medium
From: LeetCode

Description:
    Seven different symbols represents Roman numerals with the following values:
    I 1
    V 5
    X 10
    L 50
    C 100
    D 500
    M 1000

    Roman numerals are formed by appending the conversions of decimal place values from highest to 
    lowest. Converting a decimal place value into a Roman numeral has the following rules:
        - If the value does not start with 4 or 9, select the symbol of the maximal value that can 
          be subtracted from the input, append that symbol to the result, subtract its value, and 
          convert the remainder to a Roman numeral.
        - If the value starts with 4 or 9 use the subtractive form representing one symbol subtracted 
          from the following symbol, for example, 4 is 1 (I) less than 5 (V): IV and 9 is 1 (I) less 
          than 10 (X): IX. Only the following subtractive forms are used: 4 (IV), 9 (IX), 40 (XL), 90 
          (XC), 400 (CD) and 900 (CM).
        - Only powers of 10 (I, X, C, M) can be appended consecutively at most 3 times to represent 
          multiples of 10. You cannot append 5 (V), 50 (L), or 500 (D) multiple times. If you need to 
          append a symbol 4 times use the subtractive form.
    
    Given an integer, convert it to a Roman numeral.

Assumptions:
    - num >= 1

Example:
    Input: 58
    Output: "LVIII"
    Explanation: 
        50 = L
        8 = VIII

    Input: 3749
    Output: "MMMDCCXLIX"
    Explanation: 
        3000 = MMM as 1000 (M) + 1000 (M) + 1000 (M)
        700 = DCC as 500 (D) + 100 (C) + 100 (C)
        40 = XL as 10 (X) less of 50 (L)
        9 = IX as 1 (I) less of 10 (X)


Solution Explanation:
    Hash-table, O(n):
        We can utilize a hash-table, or two arrays with the symbols in order of their value,
        and we can take 'num', loop through the symbols and remove their amount 

        Algorithm Pseudocode:
            Solution {
                // Create symbols, which is the roman numerals.
                // Either use a dictionary/map, or create two arrays.
                symbols create

                roman = ""

                for (i = 0; num != 0; i++) {
                    // Add to roman by looping through the symbols, and removing
                    // their value from num.
                    while (num >= values[i]) {
                        roman += symbol[i]
                        num -= values[i]
                    }
                }
                
                return roman
            }

        Explanation of Correctness:
            The problem is mainly just a mapping problem, meaning that we are removing the 
            corresponding roman numeral value to num, then we will associate the value
            with its correct roman numeral.

        Explanation of Runtime:
            Runtime complexity is O(1), as we loop through the list of roman numerals
            in according to the int. Because the set of roman numerals is constant, this
            operation is O(1).

            Space complexity is O(1).