Name: H-Index
Type: Algorithm
Difficulty: Medium
From: LeetCode

Description:
    Given an array of integers 'citations' where 'citations[i]' is the number of citations a
    researcher recieved for their 'ith' paper, return the researcher's h-index.

    H-index is defnined as the maximum value of 'h' such tha thte given researcher has
    published at least 'h' papers that have been cited at least 'h' times. 

Assumptions:
    - citations.length >= 1
    - 0 <= citations[i] <= 1000

Example:
    Input: citations = [3, 0, 6, 1, 5]
    Output: 3
    Explanation: The researcher has published 3 papers with 3 or more citations. 

    Input: citations = [1, 3, 1]
    Output: 1
    Explanation: Because citations 0 and 2 are only one, h cannot be 3, hence h = 1 because
                 it is the largest possible value of h with h citations or more. 


Solution Explanation:
    Counting Sort, O(n):
        Because the h-value is limited by size of 'citations', we then need to perform a count 
        sort, where any value if 'citations[i]' which is greater than the length can be clumped
        together at the end of our count array.

        Algorithm Pseudocode:
            Solution {
                len = citations.length
                count = array(len + 1)

                // Populate count with the citation values.
                for (c in citations) {
                    if (c > len)
                        count[len]++
                    else 
                        count[c]++
                }

                // Add up total to obtain the h-index.
                total = 0
                for (i = len; i >= 0; i--) {
                    total += count[i]
                    if (total >= 1)
                        return i
                }

                return 0
            }

        Explanation of Correctness:
            We count the total number of citations from the length of the 'citations' variable 
            through 0. Because the h-index is dependent on the length of 'citations', we only
            need to factor any value from 0 to length. The accumulation of citations in
            count gives us our sorted count of each citation, which when worked backwards,
            can give us the ability to obtain an h-index.

            For example, if we have two values greater than length, then we know that these two
            values can make up an h-index of 2, because they will both be greater than or equal
            to two, and because there are two values, the max h-index will be atleast two. Then,
            the algorithm will work backwards to adjust the h-index to obtain the largest value.
            The more values that are later in the 'count' variable, less likely we are to 
            climb down to the lower values.

        Explanation of Runtime:
            Because we loop through 'citatations' and 'count', both of size 'n', our total Runtime
            will be O(n).

            Our space complexity will be O(n) for 'count'.